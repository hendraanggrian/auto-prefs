package com.hendraanggrian.auto.prefs.internal

import com.hendraanggrian.auto.prefs.EditablePreferences
import com.hendraanggrian.auto.prefs.PreferencesEditor
import com.hendraanggrian.auto.prefs.PreferencesSaver
import com.hendraanggrian.auto.prefs.ReadablePreferences
import com.hendraanggrian.auto.prefs.WritablePreferences

/**
 * Parent class of any class generated by `local-compiler` (should they are being used in the
 * project). It behaves similarly as [ReadablePreferences] with simpler API for generated sources to
 * use.
 */
abstract class PreferencesBinding(private val source: ReadablePreferences) : PreferencesSaver {
    protected fun get(key: String, defaultValue: String?): String? = source[key] ?: defaultValue

    protected fun get(key: String, defaultValue: Boolean): Boolean =
        source.getBooleanOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Double): Double =
        source.getDoubleOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Float): Float =
        source.getFloatOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Long): Long =
        source.getLongOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Int): Int =
        source.getIntOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Short): Short =
        source.getShortOrDefault(key, defaultValue)

    protected fun get(key: String, defaultValue: Byte): Byte =
        source.getByteOrDefault(key, defaultValue)

    protected val editor: PreferencesEditor
        get() = when (source) {
            is WritablePreferences -> source
            is EditablePreferences<*> -> source.editor
            else -> error("Unrecognizable preferences instance")
        }
}
