package com.hendraanggrian.prefs.internal

import com.hendraanggrian.prefs.Prefs
import com.hendraanggrian.prefs.PrefsEditor
import com.hendraanggrian.prefs.PrefsSaver
import com.hendraanggrian.prefs.WritablePrefs

/** Parent class of any class generated by `local-compiler`. */
abstract class PrefsBinding(private val source: Prefs) : PrefsSaver {

    protected fun get(key: String, defaultValue: String?): String? =
        source[key] ?: defaultValue

    protected fun get(key: String, defaultValue: Boolean): Boolean =
        source.getBoolean(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Double): Double =
        source.getDouble(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Float): Float =
        source.getFloat(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Long): Long =
        source.getLong(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Int): Int =
        source.getInt(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Short): Short =
        source.getShort(key) ?: defaultValue

    protected fun get(key: String, defaultValue: Byte): Byte =
        source.getByte(key) ?: defaultValue

    val editor: PrefsEditor
        get() = when (source) {
            is PrefsEditor -> source
            is WritablePrefs -> source.editor
            else -> error("Unsupported prefs instance.")
        }
}
